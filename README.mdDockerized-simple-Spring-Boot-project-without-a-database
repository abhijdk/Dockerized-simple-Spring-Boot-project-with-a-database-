

### **Step 1: Create a Spring Boot Application**
1. Generate a Spring Boot application with the following dependencies:
   - Spring Web
   - Spring Data JPA
   - MySQL Driver

2. Configure **`application.properties`**:
   ```properties
   spring.datasource.url=jdbc:mysql://db:3306/db5
   spring.datasource.username=admin
   spring.datasource.password=Mantu@12
   spring.jpa.hibernate.ddl-auto=update
   spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
   ```

3. Create an entity class:
   ```java
   @Entity
   public class User {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String name;

       // Getters and Setters
   }
   ```

4. Create a repository:
   ```java
   public interface UserRepository extends JpaRepository<User, Long> {
   }
   ```

5. Create a REST Controller:
   ```java
   @RestController
   @RequestMapping("/users")
   public class UserController {
       @Autowired
       private UserRepository repository;

       @PostMapping
       public User addUser(@RequestBody User user) {
           return repository.save(user);
       }

       @GetMapping
       public List<User> getUsers() {
           return repository.findAll();
       }
   }
   ```

---

### **Step 2: Create a `Dockerfile`**
Create a `Dockerfile` in the root directory:
```dockerfile
FROM openjdk:21
COPY target/sb_with_db.jar /do/app/
WORKDIR /do/app
ENTRYPOINT ["java", "-jar", "sb_with_db.jar"]
```

---

### **Step 3: Create `docker-compose.yml`**
Create `docker-compose.yml` in the root directory:
```yaml
version: "3.8"

services:
  app:
    image: docker_image/testapp
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/db5
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: Mantu@12
    depends_on:
      - db

  db:
    image: mysql:8.0.27
    environment:
      MYSQL_DATABASE: db5
      MYSQL_USER: admin
      MYSQL_PASSWORD: Mantu@12
      MYSQL_ROOT_PASSWORD: Mantu@12
    ports:
      - "3307:3306"
```



[docker-compose.yml is used to define and manage multi-container Docker applications. It allows you to run multiple services (like a Spring Boot app and a MySQL database) together with a single command]

---

### **Step 4: Build and Run the Application**
1. **Build the JAR file**:
   ```sh
   mvn clean package
   ```
   
2. **Build the Docker image**:
   ```sh
   docker build -t testapp .
   ```

3. **Start the application with Docker Compose**:
   ```sh
   docker-compose up -d
   ```

4. **Access the application**:
   Open [http://localhost:8080/user](http://localhost:8080/user) in a browser.

---

### **Step 5: Access MySQL in the Container**
1. Find the **container ID**:
   ```sh
   docker ps
   ```
2. Access the MySQL container:
   ```sh
   docker exec -it <container_id> bash
   ```
3. Log in to MySQL:
   ```sh
   mysql -u admin -p
   ```
4. Enter password: **Mantu@12**

---
ðŸš€
To find the **container ID** in Docker, follow these steps:

### **Option 1: Using the Command Line**
Run this command in your terminal or PowerShell:

```bash
docker ps
```

This will display a list of running containers with details like:

```
CONTAINER ID   IMAGE                 COMMAND                  PORTS                   NAMES
a1b2c3d4e5f6   mysql:8.0.27          "docker-entrypoint.sâ€¦"   0.0.0.0:3307->3306/tcp  your_db_container
```

The **CONTAINER ID** (e.g., `a1b2c3d4e5f6`) is what you need.

---

### **Option 2: Using Docker Desktop**
1. Open **Docker Desktop**.
2. Go to the **Containers** tab.
3. Find the **db** service (usually named `your_db_container`).
4. The **Container ID** will be displayed at the top of the container details.

---
